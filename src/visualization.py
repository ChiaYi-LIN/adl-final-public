#%%
import argparse
import pandas as pd
import json
from sklearn import metrics
import seaborn as sn
import matplotlib.pyplot as plt

def plot_confusion_matrix(pred_path, label_path, output_path, no_cm, exclude_undetected):
    preds_df = pd.read_csv(pred_path, sep="\t")
    with open(label_path, "r") as reader:
        refs_df = pd.DataFrame([json.loads(line) for line in reader])
    assert len(preds_df) == len(refs_df)

    if exclude_undetected == True:
        preds_df = preds_df.loc[refs_df["label"] != "undetected"]
        refs_df = refs_df.loc[refs_df["label"] != "undetected"]

    cm_hmap = None
    if no_cm == False:
        labels = ["restaurant", "hotel", "movie", "song", "transportation", "attraction", "undetected"]
        cm = metrics.confusion_matrix(y_pred=preds_df['prediction'], y_true=refs_df['label'], labels=labels)
        cm_df = pd.DataFrame(cm, index = labels, columns = labels)
        plt.figure(figsize = (14,7))
        cm_hmap = sn.heatmap(cm_df, annot=True, fmt='g')  
        cm_hmap.set(xlabel='Predict Label', ylabel='True Label')
        figure = cm_hmap.get_figure()
        figure.savefig(output_path, dpi=400)
        print(f'confusion matrix heatmap saved at {output_path}')
    
    print('classification report:')
    print(metrics.classification_report(y_pred=preds_df['prediction'], y_true=refs_df['label'], digits=3))

    return cm_hmap

def main(args):
    plot_confusion_matrix(pred_path=args.pred_path, label_path=args.label_path, output_path=args.cm_output_path, no_cm=args.no_cm, exclude_undetected=args.exclude_undetected)

def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser()

    parser.add_argument(
        "--pred_path",
        default='../tmp/intent_detect_bert_withoutBot/predict_results_None.txt',
        type=str,
        help="file that save predictied results generated by the model",
    )
    parser.add_argument(
        "--label_path",
        default='../data/validation/intent_detect_preprocess.jsonl',
        type=str,
        help="file that save the partial dialogs with hit",
    )
    parser.add_argument(
        "--no_cm",
        default=False,
        type=bool,
        help="whether to plot confusion matrix",
    )
    parser.add_argument(
        "--cm_output_path",
        default='none',
        type=str,
        help="path to save the confusion matrix heatmap",
    )
    parser.add_argument(
        "--exclude_undetected",
        default=False,
        type=bool,
        help="whether to calculate f1-scores without considering data with undetected labels",
    )
    args = parser.parse_args()

    return args


if __name__ == "__main__":
    args = parse_args()
    main(args)